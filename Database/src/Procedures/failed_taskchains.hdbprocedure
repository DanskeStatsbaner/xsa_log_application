PROCEDURE "DataWareHouse.Database.Procedures::failed_taskchains"( )
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER
AS
BEGIN



DECLARE k  INTEGER;
DECLARE  OVERRIDE_ERROR, OVERRIDE_OK, SECONDS, OK_AMOUNT, ERR_AMOUNT BIGINT;
DECLARE seconds_Dif INTEGER = SECONDS_BETWEEN(CURRENT_UTCTIMESTAMP,CURRENT_TIMESTAMP);
DECLARE RUNTIME_START, RUNTIME_END, LAST_RUN, FIRST_RUN, CUSTOM_RUN TIMESTAMP;
DECLARE IS_OVERRIDE,ENVIRONMENT, HANA_LOG_NAME, lowercase_environment NVARCHAR (50);
DECLARE  INSTANCEID, LOGID, STATUS, NAMESPACE, TASKCHAINID, SCHEDULEDECSRIPTION, STARTTIME, ENDTIME, FINISHED, RUN_TIME, DESCRIPTION, VALIDTO, CHANGEDBY, ACTIVATIONSTATUS, TASKTIMEOUT, 
SERVICEURL, CONTAINER, MODULE, RESPONSIBLE_NAME, RESPONSIBLE_EMAIL, HANA_LOG_COMMENT, RESPONSIBLE NVARCHAR (2000);
DECLARE ingesttoken NVARCHAR(2500);



FIRST_RUN = '2022-05-23';
RUNTIME_START = CURRENT_TIMESTAMP;
HANA_LOG_NAME ='failed_taskchains';
SELECT IFNULL(MAX("RUNTIME_START"),'2022-06-08 00:00:00') INTO LAST_RUN FROM "DataWareHouse.Database.Tables::log.procedure_run";


SELECT DISTINCT
	CASE 
		WHEN "SYSTEM_ID" = 'NU0' THEN 'DEV'
		WHEN "SYSTEM_ID" = 'NT0' THEN 'TEST'
		WHEN "SYSTEM_ID" = 'NP0' THEN 'PROD'
		END AS "Environment" INTO ENVIRONMENT
		FROM "DataWareHouse.Database.VirtualTables::M_DATABASE";
 
 lowercase_environment := LOWER(:ENVIRONMENT);
 
 
   CALL "DataWareHouse.Database.Synonyms::token"(
	APP => 'AP_HUMIO',
	EXCEPTION_ON_ERROR => 1,
	JWT => ingesttoken
);
 
override = SELECT 
ID,
CONTAINER,
TASKCHAINID,
OVERRIDE_OK_AMOUNT,
CASE 
WHEN UPPER(OVERRIDE_OK_NOTATION) = 'D' THEN OVERRIDE_OK_SPAN*60*60*24
WHEN UPPER(OVERRIDE_OK_NOTATION) = 'H' THEN OVERRIDE_OK_SPAN*60*60
WHEN UPPER(OVERRIDE_OK_NOTATION) = 'M' THEN OVERRIDE_OK_SPAN*60
WHEN UPPER(OVERRIDE_OK_NOTATION) = 'S' THEN OVERRIDE_OK_SPAN
END AS OVERRIDE_OK,
OVERRIDE_ERROR_AMOUNT,
CASE 
WHEN UPPER(OVERRIDE_ERROR_NOTATION) = 'D' THEN OVERRIDE_ERROR_SPAN*60*60*24
WHEN UPPER(OVERRIDE_ERROR_NOTATION) = 'H' THEN OVERRIDE_ERROR_SPAN*60*60
WHEN UPPER(OVERRIDE_ERROR_NOTATION) = 'M' THEN OVERRIDE_ERROR_SPAN*60
WHEN UPPER(OVERRIDE_ERROR_NOTATION) = 'S' THEN OVERRIDE_ERROR_SPAN
END AS OVERRIDE_ERROR,
CASE
WHEN 
	OVERRIDE_OK_AMOUNT IS NOT NULL 
	AND OVERRIDE_OK_AMOUNT > 0 
	AND OVERRIDE_OK_NOTATION  IS NOT NULL 
	AND UPPER(OVERRIDE_OK_NOTATION) IN('D','H','M','S')  
	AND OVERRIDE_OK_SPAN IS NOT NULL 
	AND OVERRIDE_OK_SPAN > 0 
	THEN 'TRUE'
WHEN  
	OVERRIDE_ERROR_AMOUNT IS NOT NULL 
	AND OVERRIDE_ERROR_AMOUNT > 0 
	AND OVERRIDE_ERROR_SPAN IS NOT NULL 
	AND OVERRIDE_ERROR_SPAN > 0 
	AND OVERRIDE_ERROR_NOTATION IS NOT NULL 
	AND UPPER(OVERRIDE_ERROR_NOTATION) IN('D','H','M','S') 
	THEN 'TRUE'
ELSE 'FALSE'
END AS default_override,
RESPONSIBLE,
WARNING_OPT_IN,
MAIL_GROUP_ID
FROM "DataWareHouse.Database.Tables::log.log_rules"
ORDER BY "ID"
;

FOR k IN 1..RECORD_COUNT(:override) DO 
CONTAINER = REPLACE(UPPER(:override."CONTAINER"[:k]),'_','-');
TASKCHAINID = UPPER(:override."TASKCHAINID"[:k]);
OVERRIDE_ERROR = :override."OVERRIDE_ERROR"[:k];
OVERRIDE_ERROR = :override."OVERRIDE_OK"[:k];
/*SECONDS = GREATEST(:OVERRIDE_ERROR, :OVERRIDE_OK);
IF SECONDS IS NOT NULL
	THEN CUSTOM_RUN = ADD_SECONDS(CURRENT_TIMESTAMP,-SECONDS);
	LAST_RUN = LEAST(LAST_RUN,CUSTOM_RUN);
END IF;*/


	    
	      chains=  SELECT 
                    Log.INSTANCEID AS INSTANCEID,
                    Log.LOGID AS LOGID,
                    Log.STATUS AS STATUS,
                    Log.NAMESPACE AS NAMESPACE,
                    Log.TASKCHAINID AS LOG_TASKCHAINID ,
                    ADD_SECONDS(Log.STARTTIME, :seconds_Dif) AS STARTTIME,
                    ADD_SECONDS(Log.ENDTIME, :seconds_Dif) AS ENDTIME,
                    Log.FINISHED AS FINISHED,
                    Log.RUN_TIME AS RUN_TIME,
                    Log.DESCRIPTION AS DESCRIPTION,
                    REPLACE(UPPER(SUBSTR_REGEXPR('(?<=https://orgname-'||:lowercase_environment||'-)(.*?)(?=-backend)'IN  TaskService.SERVICEURI)),'-','_')  AS "SCHEMA",
                    SUBSTR_REGEXPR('(?<="name":")(.*?)(?=")'IN  TaskChainHeader.RESPONSIBLE )  AS "RESPONSIBLE_NAME",
                    SUBSTR_REGEXPR('(?<="email":")(.*?)(?=")'IN  TaskChainHeader.RESPONSIBLE )  AS "RESPONSIBLE_EMAIL"
                FROM "DataWareHouse.Database.VirtualTables::Log" Log
                JOIN "DataWareHouse.Database.VirtualTables::TaskchainHeader" TaskChainHeader ON Log.INSTANCEID = TaskChainHeader.INSTANCEID AND Log.NAMESPACE = TaskChainHeader.NAMESPACE 
                AND Log.TASKCHAINID = TaskChainHeader.TASKCHAINID AND TaskChainHeader.VALIDTO IS NULL
                JOIN "DataWareHouse.Database.VirtualTables::TaskService" TaskService ON Log.INSTANCEID = TaskService.INSTANCEID AND TaskService.TASKGROUPID = 'hanaNative'
                WHERE UPPER(Log.TASKCHAINID) = UPPER(:TASKCHAINID)  AND  UPPER(SUBSTR_REGEXPR('(?<=https://orgname-'||:lowercase_environment||'-)(.*?)(?=-backend)'IN  TaskService.SERVICEURI)) = UPPER(:CONTAINER)
              ;
            
           
            
         
            SELECT COUNT(*) INTO OK_AMOUNT
            FROM :chains a
            JOIN :override b ON (UPPER(a.LOG_TASKCHAINID) = UPPER(b.TASKCHAINID) AND UPPER(a."SCHEMA") = UPPER(b."CONTAINER"))
            WHERE 
            default_override ='TRUE' AND ENDTIME BETWEEN ADD_SECONDS(CURRENT_TIMESTAMP,-OVERRIDE_OK)AND CURRENT_TIMESTAMP AND "STATUS" = 'OK' AND OVERRIDE_OK > 0
            ;
            
             SELECT COUNT(*) INTO ERR_AMOUNT
            FROM :chains a
            JOIN :override b ON (UPPER(a.LOG_TASKCHAINID) = UPPER(b.TASKCHAINID) AND UPPER(a."SCHEMA") = UPPER(b."CONTAINER"))
            WHERE 
            default_override ='TRUE' AND ENDTIME BETWEEN ADD_SECONDS(CURRENT_TIMESTAMP,-OVERRIDE_ERROR)AND CURRENT_TIMESTAMP AND "STATUS" IN ('ABORTED','ERROR') AND OVERRIDE_ERROR > 0
            ;
           
                
                errors = SELECT *,
               ROW_NUMBER() OVER (PARTITION BY a.LOG_TASKCHAINID ORDER BY a.STARTTIME DESC) as ROWNUMBER,
               :ERR_AMOUNT AS "ERR_AMOUNT",
               :OK_AMOUNT AS "OK_AMOUNT"
               FROM :chains a
               JOIN :override b ON (UPPER(a.LOG_TASKCHAINID) = UPPER(b.TASKCHAINID) AND UPPER(a."SCHEMA") = UPPER(b."CONTAINER"))
            	WHERE 
            	(ENDTIME > :LAST_RUN AND ENDTIME >:FIRST_RUN AND "STATUS" IN ('ERROR','ABORTED'))
            	AND 
            	default_override = 'FALSE' 
            		OR (default_override='TRUE' 
            			AND ( 
            				(:ERR_AMOUNT >=  OVERRIDE_ERROR_AMOUNT AND OVERRIDE_ERROR_AMOUNT IS NOT NULL AND OVERRIDE_ERROR > 0) 
            					OR (:OK_AMOUNT < OVERRIDE_OK_AMOUNT   AND OVERRIDE_OK_AMOUNT IS NOT NULL  AND OVERRIDE_OK > 0)))
                 ORDER BY STARTTIME DESC;
                
                
               humio = select * from :errors where ROWNUMBER = 1;
               
               warning_mails = select * from :humio a
                              where  "WARNING_OPT_IN" = TRUE;
               
               INSERT INTO "DataWareHouse.Database.Tables::log.warning_mails" SELECT  ID, MAIL_GROUP_ID FROM :warning_mails;

               
               
FOR k IN 1..RECORD_COUNT(:humio) DO 
		INSTANCEID = IFNULL(:humio."INSTANCEID"[:k],'NA');
		LOGID = IFNULL(:humio."LOGID"[:k],-1);
		STATUS = IFNULL(:humio."STATUS"[:k],'NA');
		NAMESPACE = IFNULL(:humio."NAMESPACE"[:k],'NA');
		TASKCHAINID = IFNULL(:humio."LOG_TASKCHAINID"[:k],'NA');
		STARTTIME = IFNULL(:humio."STARTTIME"[:k],'9999-01-01');
		ENDTIME = IFNULL(:humio."ENDTIME"[:k],'9999-01-01');
		FINISHED = IFNULL(:humio."FINISHED"[:k],-1);
		RUN_TIME = IFNULL(:humio."RUN_TIME"[:k],-1);
		DESCRIPTION = IFNULL(:humio."DESCRIPTION"[:k],'NA');
		CONTAINER = IFNULL(:humio."SCHEMA"[:k],'NA');
		RESPONSIBLE_NAME = IFNULL(:humio."RESPONSIBLE_NAME"[:k],'NA');
		RESPONSIBLE_EMAIL = IFNULL(:humio."RESPONSIBLE_EMAIL"[:k],'NA');
		RESPONSIBLE = IFNULL(:humio."RESPONSIBLE"[:k],'NA');
	
		
	CALL "DataWareHouse.Database.Synonyms::humio"(
    MESSAGE => 'Native HANA system log',
    LOG_LEVEL => 'WARNING',
    HOST => 'HANA',
    SRC => 'failed_taskchains.hdbprocedure',
       ATTRIBUTES => '"ENVIRONMENT":"' || 'PROD' || '", "INSTANCEID":"' || :INSTANCEID || '", "LOGID":"' || :LOGID || '", "STATUS":"' || :STATUS || '", "NAMESPACE":"' || :NAMESPACE  || '", "TASKCHAINID":"' || :TASKCHAINID
       || '", "STARTTIME":"' || :STARTTIME || '", "ENDTIME":"' || :ENDTIME ||  '", "FINISHED":"' || :FINISHED || '", "RUN_TIME":"' || :RUN_TIME || '", "DESCRIPTION":"' || :DESCRIPTION ||  '", "CONTAINER":"' || :CONTAINER || '", "RESPONSIBLE_NAME":"' || :RESPONSIBLE_NAME || '", "RESPONSIBLE_EMAIL":"' || :RESPONSIBLE_EMAIL
       || '", "RESPONSIBLE":"' || :RESPONSIBLE
       ||'"',
    JWT => :ingesttoken,
    EXCEPTION_ON_ERROR => 1
);
END FOR;

END FOR;

RUNTIME_END = CURRENT_TIMESTAMP;
INSERT INTO "DataWareHouse.Database.Tables::log.procedure_run" ("NAME", "RUNTIME_START", "RUNTIME_END", "COMMENT") VALUES(:HANA_LOG_NAME, :RUNTIME_START, :RUNTIME_END, :HANA_LOG_COMMENT);
 
END;            
